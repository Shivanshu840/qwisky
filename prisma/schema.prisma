// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String              @id @default(cuid())
  name                  String?
  email                 String              @unique
  emailVerified         DateTime?
  image                 String?
  isOnline              Boolean             @default(false)
  lastSeen              DateTime            @default(now())
  accounts              Account[]
  sessions              Session[]
  messages              Message[]
  groupMembers          GroupMember[]
  sentInvitations       Invitation[]        @relation("InvitationSender")
  receivedInvitations   Invitation[]        @relation("InvitationReceiver")
  friendships1          Friendship[]        @relation("User1")
  friendships2          Friendship[]        @relation("User2")
  directMessages1       DirectMessage[]     @relation("DirectMessageSender")
  directMessages2       DirectMessage[]     @relation("DirectMessageReceiver")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Group {
  id          String        @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  members     GroupMember[]
  rooms       Room[]
}

model GroupMember {
  id      String @id @default(cuid())
  userId  String
  groupId String
  role    String @default("member") // "admin", "member"
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

model Room {
  id          String    @id @default(cuid())
  name        String
  description String?
  groupId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  group       Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  messages    Message[]
}

model Message {
  id        String   @id @default(cuid())
  content   String
  userId    String
  roomId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Invitation {
  id         String            @id @default(cuid())
  senderId   String
  receiverId String
  type       InvitationType    @default(FRIEND_REQUEST)
  status     InvitationStatus  @default(PENDING)
  message    String?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  sender     User              @relation("InvitationSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User              @relation("InvitationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}

model Friendship {
  id        String   @id @default(cuid())
  user1Id   String
  user2Id   String
  createdAt DateTime @default(now())
  user1     User     @relation("User1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2     User     @relation("User2", fields: [user2Id], references: [id], onDelete: Cascade)

  @@unique([user1Id, user2Id])
}

model DirectMessage {
  id         String   @id @default(cuid())
  content    String
  senderId   String
  receiverId String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation("DirectMessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("DirectMessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
}

enum InvitationType {
  FRIEND_REQUEST
  GROUP_INVITE
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}
